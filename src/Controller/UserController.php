<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\UserType;
use App\Form\EditUserType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\FormError;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class UserController extends AbstractController {

    /**
     * @Route("/adduser" , name="add-user")
     * 
     */
    public function addUser(Request $request, UserPasswordEncoderInterface $encoder) {
        $em = $this->getDoctrine()->getManager();
        $user = new User();
        $form = $this->createForm(UserType::class, $user);
//test pour git init workflow

        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
             $file = $form->get('photo')->getData();
           
            $email = $form->get('email')->getData();
            $password = $form->get('password')->getData();
            $emailUser = $em->getRepository('App\Entity\User')->findByEmail($email);
            if (!empty($emailUser)) {
                $form->get('email')->addError(new FormError("Cette adresse email est déjà associée à un compte "));
                return $this->render('user/add-user.html.twig', [
                            'form' => $form->createView()
                                ]
                );
            }
            $encoded = $encoder->encodePassword($user, $password);
            $user->setPassword($encoded);
            $user->setRoles(['ROLE_USER']);
            $em->persist($user);
            $em->flush();
            return $this->redirectToRoute('dashboard');
        }

        return $this->render('user/add-user.html.twig', [
                    'form' => $form->createView()
                        ]
        );
    }

    /**
     * @Route("/{id}/edituser" , name="edit-user")
     * 
     */
    public function editUser(Request $request, UserPasswordEncoderInterface $encoder, $id) {
        $em = $this->getDoctrine()->getManager();

        $user = $em->getRepository('App\Entity\User')->find($id);
        $form = $this->createForm(EditUserType::class, $user);
//test pour git init workflow

        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            //$file = $user->getPhoto();
             $file = $form->get('photo')->getData();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                        $this->getParameter('users_directory'), $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $user->setPhoto($fileName);

            $user->setRoles(['ROLE_ADMIN']);
            $em->persist($user);
            $em->flush();
            return $this->redirectToRoute('dashboard');
        }

        return $this->render('user/edit-user.html.twig', [
                    'form' => $form->createView()
                        ]
        );
    }

    /**
     * @return string
     */
    private function generateUniqueFileName() {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/{id}/deleteuser" , name="delete-user")
     * 
     */
    public function DeleteUser(Request $request, $id) {
        $em = $this->getDoctrine()->getManager();

        $user = $em->getRepository('App\Entity\User')->find($id);

        if ($user) {
            $em->remove($user);
            $em->flush();
            //$request->getSession()->getFlashBag()->add('notice', array('alert' => 'success', 'title' => $trans->trans('message.title.succes'), 'message' => $trans->trans('message.text.succes')));
        } else {
            throw $this->createNotFoundException('Unable to find user entity.');
        }

        return $this->redirectToRoute('dashboard');


//        return $this->render('user/edit-user.html.twig', [
//                    'form' => $form->createView()
//                        ]
//        );
    }

}
