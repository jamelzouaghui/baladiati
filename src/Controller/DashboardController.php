<?php

namespace App\Controller;

use App\Entity\Depute;
use App\Entity\Presentation;
use App\Form\DeputeType;
use App\Form\EditDeputeType;
use App\Form\EditPresentationType;
use App\Form\PresentationType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

class DashboardController extends AbstractController {

    /**
     * @Route("/dashboard" , name="dashboard")
     * 
     */
    public function index(Request $request) {

        $em = $this->getDoctrine()->getManager();

        $presentation = $em->getRepository('App\Entity\Presentation')->findAll();
        $deputes = $em->getRepository('App\Entity\Depute')->findAll();
        $countpres = count($presentation);
        return $this->render('presentation/index.html.twig', [
                    'presentation' => $presentation,
                    'deputes' => $deputes,
                    'nbpresentation' => $countpres
                        ]
        );
    }

    /**
     * @Route("/add-presentation" , name="add-presentation")
     * 
     */
    public function addPresentation(Request $request) {
        $em = $this->getDoctrine()->getManager();
        $entity = new Presentation();
        $form = $this->createForm(PresentationType::class, $entity);
//test pour git init workflow

        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {

            $em->persist($entity);
            $em->flush();
            $this->addFlash('success', 'presentation Créer! succées!');
            return $this->redirectToRoute('dashboard');
        }

        return $this->render('presentation/add-presentation.html.twig', [
                    'form' => $form->createView()
                        ]
        );
    }

    /**
     * @Route("/{id}/update-presentation" , name="edit-presentation")
     * 
     */
    public function editPresentation(Request $request, $id) {

        $em = $this->getDoctrine()->getManager();

        $presentation = $em->getRepository('App\Entity\Presentation')->find($id);


        $form = $this->createForm(EditPresentationType::class, $presentation);
        $form->handleRequest($request);


        if ($form->isSubmitted() && $form->isValid()) {
            $em->persist($presentation);
            $em->flush();
            $this->addFlash('success', 'presentation modifier! succées!');
            return $this->redirectToRoute('dashboard');
        }

        return $this->render('presentation/edit-presentation.html.twig', [
                    'form' => $form->createView(),
                    'id' => $id,
                    'presentation' => $presentation
                        ]
        );
    }

    /**
     * @Route("/add-depute" , name="add-depute")
     * 
     */
    public function addDepute(Request $request) {
        $em = $this->getDoctrine()->getManager();
        $entity = new Depute();
        $form = $this->createForm(DeputeType::class, $entity);
//test pour git init workflow

        $form->handleRequest($request);
        if ($form->isSubmitted()) {
            $file = $form->get('photo')->getData();
            $filecv = $form->get('cv')->getData();

            if ($filecv->guessExtension() != 'pdf') {
                $this->addFlash('success', 'le fichier doit etre de format pdf ou doc!');
                return $this->redirectToRoute('dashboard');
            } else {
                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                $fileNamecv = $this->generateUniqueFileName() . '.' . $filecv->guessExtension();
                try {
                    $file->move($this->getParameter('users_directory'), $fileName);
                    $filecv->move($this->getParameter('users_directory'), $fileNamecv);
                } catch (FileException $e) {
                    
                }

                $entity->setPhoto($fileName);
                $entity->setCv($fileNamecv);



                $em->persist($entity);
                $em->flush();
                $this->addFlash('success', 'deputé Créer! succées!');
                return $this->redirectToRoute('dashboard');
            }
        }

        return $this->render('presentation/add-depute.html.twig', [
                    'form' => $form->createView()
                        ]
        );
    }

    /**
     * @return string
     */
    private function generateUniqueFileName() {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/{id}/edit-depute" , name="edit-depute")
     * 
     */
    public function editDepute(Request $request, $id) {

        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('App\Entity\Depute')->find($id);

        $photodepute = $entity->getPhoto();
        $photocv = $entity->getCv();

        $form = $this->createForm(EditDeputeType::class, $entity);
        $form->handleRequest($request);


        if ($form->isSubmitted()) {
            $file = $form->get('photo')->getData();
            $filecv = $form->get('cv')->getData();

            if ($filecv) {
                if ($filecv->guessExtension() != 'pdf') {
                    $this->addFlash('success', 'le fichier doit etre de format pdf ou doc!');
                    return $this->redirectToRoute('dashboard');
                } else {
                    if ($file) {
                        $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                        try {
                            $file->move($this->getParameter('users_directory'), $fileName);
                           
                        } catch (FileException $e) {
                            
                        }
                    }

                    $fileNamecv = $this->generateUniqueFileName() . '.' . $filecv->guessExtension();

                    try {
                        
                        $filecv->move($this->getParameter('users_directory'), $fileNamecv);
                    } catch (FileException $e) {
                        
                    }

                    $entity->setPhoto($fileName);
                    $entity->setCv($fileNamecv);
                }
            } else {
                $entity->setPhoto($photodepute);
                $entity->setCv($photocv);
            }

            $em->persist($entity);
            $em->flush();
            $this->addFlash('success', 'député modifier! succées!');
            return $this->redirectToRoute('dashboard');
        }

        return $this->render('presentation/edit-depute.html.twig', [
                    'form' => $form->createView(),
                    'id' => $id,
                    'entity' => $entity
                        ]
        );
    }

    /**
     * @Route("/{id}/deleteDepute" , name="delete-depute")
     * 
     */
    public function DeleteDepute(Request $request, $id) {
        $em = $this->getDoctrine()->getManager();

        $depute = $em->getRepository('App\Entity\Depute')->find($id);

        if ($depute) {
            $em->remove($depute);
            $em->flush();
            $this->addFlash('success', 'député supprimer! succées!');
            //$request->getSession()->getFlashBag()->add('notice', array('alert' => 'success', 'title' => $trans->trans('message.title.succes'), 'message' => $trans->trans('message.text.succes')));
        } else {
            throw $this->createNotFoundException('Unable to find user entity.');
        }
        $deputes = $em->getRepository('App\Entity\Depute')->findAll();
        $presentation = $em->getRepository('App\Entity\Presentation')->findAll();
        return $this->redirectToRoute('dashboard');
        return $this->render('presentation/index.html.twig', [
                    'deputes' => $deputes,
                    'deputes' => $presentation
                        ]
        );
    }

}
